@page "/register"
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
<PageTitle>Register</PageTitle>

<div class="UserForm">
    <div class="RegisterHeadingContainer">
        <h2 class="RegisterHeading">Sign Up</h2>
    </div>

    <div>
        <input class="UserInputFields" placeholder="Username" @bind="username" />
    </div>
    
    <div style="position: relative;">
        <input type="@passwordInputType" class="UserInputFields" placeholder="Password" @bind="password"/>
         <span class="material-symbols-outlined" style="position: absolute; right: 10px; top: 20px; transform: translateY(-50%); cursor: pointer;" @onclick="TogglePasswordVisibility">
            @if (showPassword)
            {
                    <span>visibility</span>
            }
            else
            {
                    <span>visibility_off</span>
            }
        </span>
    </div>

    <div>
        <input type="@passwordInputType" class="UserInputFields" placeholder="Confirm Password" @bind="confirmPassword"/>
    </div>

    <div>
        @if (!string.IsNullOrEmpty(validationMessage))
        {
            <p class="validation-message">
                <ul>
                    @foreach (var message in validationMessage.Split('\n'))
                    {
                            <li>@message</li>
                    }
                </ul>
            </p>
        }
    </div>

    <div>
        <button @onclick="RegisterUser">Register</button>
    </div>

    <div>
        <p>Already have an account? <NavLink href="/">Log In</NavLink></p>
    </div>
</div>

<style>
    ::placeholder{
        color: dimgrey;
    }

    .validation-message ul {
        list-style-type: disc;
        padding-left: 20px;  
    }

     .RegisterHeading {
        text-align: left;
        margin-left: 25px;
        margin-top: 15px;
        font-weight: 500;
        font-size: 25px;
    }

    .RegisterHeadingContainer {
        display: flex;
        justify-content: flex-start; 
        width: 100%; 
    }
</style>

@code {
    private string? validationMessage;
    private string? username;
    private string? password;
    private string? confirmPassword;
    private bool showPassword;
    private string? passwordInputType => showPassword ? "text" : "password";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var isAuthenticated = user.Identity?.IsAuthenticated;

        if (isAuthenticated != null)
        {
            NavManager.NavigateTo("/home");
        }
    }

    private async Task RegisterUser()
    {
        if (ValidateInputs())
        {
            if (username is not null && password is not null)
            {
                var result = await UserManager.AddUserAsync(username, password);
                if (result.Succeeded)
                {
                    await UserManager.AssignRoleToUserAsync(username, "User");
                    validationMessage = "";
                    NavManager.NavigateTo("/home");
                }
                else
                {
                    validationMessage = string.Join("\n", result.Errors.Select(error => error.Description));
                }
            }
        }
    }

    private bool ValidateInputs()
    {
        List<string> validationMessages = new List<string>();

        if (string.IsNullOrEmpty(username))
        {
            validationMessages.Add("Must enter a username");
        }

        if (string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword))
        {
            validationMessages.Add("Enter a password");
        }

        if (password != confirmPassword)
        {
            validationMessages.Add("Password and Confirm Password don't match");
        }

        if (validationMessages.Count > 0)
        {
            validationMessage = string.Join("\n", validationMessages);
            return false;
        }

        return true;
    }

    private void TogglePasswordVisibility() 
    {
        showPassword = !showPassword;
    }
}

